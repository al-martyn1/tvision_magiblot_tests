---
Title: Заметки по портированию TurboVision (magiblot) на голое железо
---

Данная статья помогла мне добавить в TurboVision (magiblot) возможности для работы на голом железе, в микроконтроллере, без какой-либо операционной системы.

Первоначально я пытался разобраться, что мне требуется сделать, гуляя по исходным текстам в IDE, но, потратив некоторое время,
я понял, что ни на йоту не приблизился к пониманию того, что мне требуется сделать, и решил начать с описания существующих классов,
вставляя фрагменты кода непосредственно в документ. В этом мне оказала бесценную помощь утилита [umba-md-pp](https://github.com/al-martyn1/umba-md-pp/blob/main/README.md),
которая позволяет вставлять произвольные фрагменты кода из сторонних файлов по сигнатуре (и не только), и умеющая искать блоки кода по блочным символам (`{}` для `С++`) и не только.
Также мне очень помогла утилита `umba-md-pp-view`, которая при помощи **Doxygen** умеет формировать `RTF`-файл из `MD` документа для локального просмотра.

По мере того, как я описывал существующее положение дел, ко мне стало приходить понимание того, что требуется сделать.
Был потрачен день на блуждание по исходникам, и в результате выхлопа было ровно ноль. Затем было потрачено полтора дня на описание существующей системы,
и полдня на реализацию новой подсистемы.

Получившийся документ в результате может служить некоторым руководством по подсистеме вывода графики и пользовательского ввода библиотеки TurboVision.


# Классы и структуры


#//---------------------------------------------

## class StdioCtl final

Хранит хэндлы файловых объектов, которые используются для вывода на экран и для полчения пользовательского ввода.

#!insert{nolineno,noKeepCutTags,filename,path} tvision/include/tvision/internal/stdioctl.h#`class StdioCtl final`-{}

Для `TV_BARE_METAL` будем хранить два `int`-а - "дескрипторы" UART-портов (по факту - индексы портов), но реализация может
не учитывать их и писать/читать в/из порт/а по своему усмотрению.

Не хватает метода `read` - видимо, все просто берут дескриптор, и делают с ним, что хотят. Надо абстрагироватся от дескриптора,
и работать через метод `read`. 

Есть странные методы - `getSize` и `getFontSize`. Странные потому, что не очень понятно, почему они сюда засунуты.

`getFontSize` используется в `TerminalDisplay::getScreenMode()` для установки флага `TDisplay::smFont8x8` - тоже не очень понятно, что это.

`getSize` используется в `NcursesDisplay::reloadScreenInfo()`, `TerminalDisplay::screenChanged()` и `Win32Display::reloadScreenInfo()`.

Реализация `UNIX`:

#// !insert{nolineno,noKeepCutTags,filename,path} tvision/source/platform/stdioctl.cpp#`#ifdef _TV_UNIX`/`TPoint StdioCtl::getSize() const noexcept`-{}
#!insert{nolineno,noKeepCutTags,filename,path} tvision/source/platform/stdioctl.cpp#`#elif defined(_TV_UNIX)`/`TPoint StdioCtl::getSize() const noexcept`-{}

#// !insert{nolineno,noKeepCutTags,filename,path} tvision/source/platform/stdioctl.cpp#`#ifdef _TV_UNIX`/`TPoint StdioCtl::getFontSize() const noexcept`-{}
#!insert{nolineno,noKeepCutTags,filename,path} tvision/source/platform/stdioctl.cpp#`#elif defined(_TV_UNIX)`/`TPoint StdioCtl::getFontSize() const noexcept`-{}

 - [console_font_op](https://coral.googlesource.com/busybox/+/refs/tags/1_15_1/console-tools/loadfont.c)
 - [TIOCGWINSZ](https://www.opennet.ru/man.shtml?topic=tty_ioctl&category=4&russian=0)

Реализация `WIN32`:

#!insert{nolineno,noKeepCutTags,filename,path} tvision/source/platform/stdioctl.cpp#`#elif defined(_WIN32)`/`TPoint StdioCtl::getSize() const noexcept`-{}

#!insert{nolineno,noKeepCutTags,filename,path} tvision/source/platform/stdioctl.cpp#`#elif defined(_WIN32)`/`TPoint StdioCtl::getFontSize() const noexcept`-{}

 - [GetConsoleScreenBufferInfo](https://learn.microsoft.com/ru-ru/windows/console/getconsolescreenbufferinfo)
 - [GetCurrentConsoleFont](https://learn.microsoft.com/en-us/windows/console/getcurrentconsolefont)

В целом, для `TV_BARE_METAL` это не нужно.

Добавляемая реализация метода `read` должна будет возвращать управление сразу, без блокировки, и возвращать то количество байт, 
которое доступно для чтения, или `0`, если в буфере ничего нет.


#//---------------------------------------------

## InputStrategy и его производные


### class EventSource

Базовый класс для InputStrategy и LinuxConsoleInput.

#!insert{nolineno,noKeepCutTags,filename,path} tvision/include/tvision/internal/events.h#`namespace tvision`/`#ifdef _WIN32`-(1)

#!insert{nolineno,noKeepCutTags,filename,path} tvision/include/tvision/internal/events.h#`class EventSource`-{}



### class InputStrategy : public EventSource

Базовый класс для конкретных реализаций InputStrategy.

#!insert{nolineno,noKeepCutTags,filename,path} tvision/include/tvision/internal/platform.h#`class InputStrategy : public EventSource`-{}

`getButtonCount()` - для `TV_BARE_METAL` должно возвращать 0, так как мышь мы не поддерживаем.

`cursorOn()` - включение курсора (мышиного, наверное)?

`cursorOff()` - выключение курсора (мышиного, наверное)?

Реализации:

#!insert{nolineno,noKeepCutTags,filename,path} tvision/source/platform/win32con.cpp#`void Win32Input::cursorOn() noexcept`-{}

#!insert{nolineno,noKeepCutTags,filename,path} tvision/source/platform/win32con.cpp#`void Win32Input::cursorOff() noexcept`-{}



### class GpmInput final : public InputStrategy

#!insert{nolineno,noKeepCutTags,filename,path} tvision/include/tvision/internal/gpminput.h#`class GpmInput final : public InputStrategy`-{}


### class NcursesInput : public InputStrategy

#!insert{nolineno,noKeepCutTags,filename,path} tvision/include/tvision/internal/ncursinp.h#`class NcursesInput : public InputStrategy`-{}


### class Win32Input final : public InputStrategy

#!insert{nolineno,noKeepCutTags,filename,path} tvision/include/tvision/internal/win32con.h#`class Win32Input final : public InputStrategy`-{}


### struct LinuxConsoleInput final : public EventSource

Использует InputStrategy.

#!insert{nolineno,noKeepCutTags,filename,path} tvision/include/tvision/internal/linuxcon.h#`struct LinuxConsoleInput final : public EventSource`-{}



#//---------------------------------------------

## DisplayStrategy и его производные

### class DisplayStrategy

#!insert{nolineno,noKeepCutTags,filename,path} tvision/include/tvision/internal/platform.h#`class DisplayStrategy`-{}

Данный класс позволяет:

  - Получать размер экрана
  - Получать размер каретки
  - Получать режим экрана
  - Очищать экран
  - Предоставляет низкоуровневые сервисы по установке размера курсора, перемещению позиции вывода, и по сбросу экранного буфера


### class TerminalDisplay : public DisplayStrategy

#!insert{nolineno,noKeepCutTags,filename,path} tvision/include/tvision/internal/termdisp.h#`class TerminalDisplay : public DisplayStrategy`-{}


### class AnsiDisplayBase

#!insert{nolineno,noKeepCutTags,filename,path} tvision/include/tvision/internal/ansidisp.h#`class AnsiDisplayBase`-{}


### template<class DisplayBase> class AnsiDisplay : public DisplayBase, public AnsiDisplayBase

#!insert{nolineno,noKeepCutTags,filename,path} tvision/include/tvision/internal/ansidisp.h#`template<class DisplayBase> class AnsiDisplay`-{}

The base class of AnsiDisplay must be a derived of TerminalDisplay.


### class NcursesDisplay : public TerminalDisplay

#!insert{nolineno,noKeepCutTags,filename,path} tvision/include/tvision/internal/ncurdisp.h#`class NcursesDisplay : public TerminalDisplay`-{}


### class Win32Display : public TerminalDisplay

#!insert{nolineno,noKeepCutTags,filename,path} tvision/include/tvision/internal/win32con.h#`class Win32Display : public TerminalDisplay`-{}



#/*

 - `` - 
 - `` - 
 - `` - 
    virtual TPoint getScreenSize() noexcept { return {}; }
    virtual int getCaretSize() noexcept { return 0; } // Range [0, 100].
    virtual void clearScreen() noexcept {}
    virtual ushort getScreenMode() noexcept { return 0; }
    virtual void reloadScreenInfo() noexcept {}
    virtual void lowlevelWriteChars(TStringView /*chars*/, TColorAttr /*attr*/) noexcept {}
    virtual void lowlevelMoveCursor(uint /*x*/, uint /*y*/) noexcept {};
    virtual void lowlevelMoveCursorX(uint x, uint y) noexcept { lowlevelMoveCursor(x, y); }
    virtual void lowlevelCursorSize(int /*size*/) noexcept {};
    virtual void lowlevelFlush() noexcept {};
    virtual bool screenChanged() noexcept { return false; }

#*/






#//---------------------------------------------

## ConsoleStrategy и его производные

### struct ConsoleStrategy

#!insert{nolineno,noKeepCutTags,filename,path} tvision/include/tvision/internal/platform.h#`struct ConsoleStrategy`-{}

Базовый класс для конкретных реализаций ConsoleStrategy.


### class LinuxConsoleStrategy : public ConsoleStrategy

#!insert{nolineno,noKeepCutTags,filename,path} tvision/include/tvision/internal/linuxcon.h#`class LinuxConsoleStrategy : public ConsoleStrategy`-{}


### class Win32ConsoleStrategy final : public ConsoleStrategy

#!insert{nolineno,noKeepCutTags,filename,path} tvision/include/tvision/internal/win32con.h#`class Win32ConsoleStrategy final : public ConsoleStrategy`-{}


Win32ConsoleStrategy работает через AnsiDisplay, если система это поддерживает:

win32con.cpp:103 (ф-я Win32ConsoleStrategy::create())
'''cpp
    auto &display = supportsVT ? *new AnsiDisplay<Win32Display>(io)
                               : *new Win32Display(io);
'''


### class UnixConsoleStrategy : public ConsoleStrategy

#!insert{nolineno,noKeepCutTags,filename,path} tvision/include/tvision/internal/unixcon.h#`class UnixConsoleStrategy : public ConsoleStrategy`-{}


### Platform::createConsole() - создание консоли

#!insert{nolineno,noKeepCutTags,filename,path} tvision/source/platform/platfcon.cpp#`ConsoleStrategy &Platform::createConsole() noexcept`-{}


#//---------------------------------------------

## class Platform

#!insert{nolineno,noKeepCutTags,filename,path} tvision/include/tvision/internal/platform.h#`class Platform`-{}

Делает кучу всего, надо разбираться.


## class DisplayBuffer

#!insert{nolineno,noKeepCutTags,filename,path} tvision/include/tvision/internal/dispbuff.h#`class DisplayBuffer`-{}


## class THardwareInfo

#!insert{nolineno,noKeepCutTags,filename,path} tvision/include/tvision/hardware.h#`class THardwareInfo`-{}


## struct InputState

#!insert{nolineno,noKeepCutTags,filename,path} tvision/include/tvision/internal/terminal.h#`struct InputState`-{}


## class InputGetter

#!insert{nolineno,noKeepCutTags,filename,path} tvision/include/tvision/internal/terminal.h#`class InputGetter`-{}


## struct CSIData

#!insert{nolineno,noKeepCutTags,filename,path} tvision/include/tvision/internal/terminal.h#`struct CSIData`-{}


## namespace TermIO

#!insert{nolineno,noKeepCutTags,filename,path} tvision/include/tvision/internal/terminal.h#`namespace TermIO`-{}


TVISION_MAX_FPS

# Ввод

## TVISION_ESCDELAY


#/*


class DisplayBuffer
{
    friend FlushScreenAlgorithm;


## 

#!insert{nolineno,noKeepCutTags,filename,path} tvision/include/tvision/internal/terminal.h#``-{}


## 

#!insert{nolineno,noKeepCutTags,filename,path} tvision/include/tvision/internal/#``-{}


## 

#!insert{nolineno,noKeepCutTags,filename,path} tvision/include/tvision/internal/#``-{}


## 

#!insert{nolineno,noKeepCutTags,filename,path} tvision/include/tvision/internal/#``-{}


#*/


#!insert{doc} md_/display-strategy-summary.md_

